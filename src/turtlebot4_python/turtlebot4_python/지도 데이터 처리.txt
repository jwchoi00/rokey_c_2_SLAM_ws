지도 데이터 처리
   지도 데이터(OccupancyGrid)를 수신한 후 numpy 배열로 변환. (np.array(msg.data).reshape(height, width))
   장애물 근처에 여유 공간을 두기 위해 inflate_map 함수로 지도 확장.
로봇 위치 추적
   if origin이 없으면
      반환
   else
      /odom 토픽에서 로봇의 위치 및 방향(roll, pitch, yaw)을 가져옴.
      로봇의 실제 위치를 지도 좌표계로 변환.
A* 경로 탐색 알고리즘
   A 알고리즘* 구현:
      **시작점(start)**에서 **목표점(goal)**까지 최적 경로 탐색.
      각 셀에서 이동 가능한 인접 셀(상하좌우 및 대각선)을 확인.
      휴리스틱 함수(유클리드 거리)를 사용하여 경로 비용 평가.
      최적 경로를 발견하면 반환.
   경로가 없을 경우 None 반환.
프론티어 기반 목표 설정
   find_frontier_goal 함수로 목표 지점 설정:
      지도의 이동 가능한 셀 중 주변에 알려지지 않은(-1) 영역이 있는 셀을 프론티어로 식별.
      로봇과 가장 가까운 프론티어 셀을 목표로 선택.
경로 계획 및 발행
   현재 지도 및 로봇 위치 정보를 바탕으로 경로를 계획.
   목표 프론티어 셀이 있을 경우 A* 알고리즘으로 경로 탐색.
   경로를 찾으면 ROS Path 메시지로 경로 발행.
      각 경로 점을 지도 좌표에서 실제 좌표로 변환.
목표 지점으로 이동
   로봇이 목표 지점에 가까워지면 이동을 멈춤.
      목표 도달 조건: 거리 < threshold (예: 1m).
   목표까지의 방향과 거리 계산.
   로봇 이동 명령(Twist 메시지) 생성:
      선형 속도(linear.x): 목표 거리와 비례하여 설정.
      각속도(angular.z): 목표 방향과 현재 방향의 차이를 기반으로 설정.
방향 제어
   로봇이 목표 방향으로 회전하도록 제어:
      목표 각도와 현재 각도의 차이를 계산.
      비례 제어기를 사용해 각속도 조정.
   최대 회전 속도를 초과하지 않도록 제한.
주요 작업 반복
   경로 계획과 이동 명령을 타이머를 통해 반복적으로 수행.
   목표를 계속해서 업데이트하며 로봇을 이동시킴.
종료
   ROS 2 노드를 종료하고 관련 리소스를 정리.